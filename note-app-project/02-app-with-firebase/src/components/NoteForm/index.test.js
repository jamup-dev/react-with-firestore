import React from 'react';
import { render, act, fireEvent } from '@testing-library/react';
import { BrowserRouter } from 'react-router-dom';

import NoteForm from '.';

describe('NoteForm Component', () => {
  test('shows form with initial title and note', () => {
    const { getByTestId } = render(
      <BrowserRouter>
        <NoteForm
          initialTitle="Initial Title"
          initialNote="Initial Note"
          onSave={() => {}}
        />
      </BrowserRouter>
    );
    // get input and textarea by test id and expect the `.value`
    const titleInput = getByTestId('note-title');
    expect(titleInput).toBeInTheDocument();
    expect(titleInput.value).toBe('Initial Title');
    const noteInput = getByTestId('note-note');
    expect(noteInput).toBeInTheDocument();
    expect(noteInput.value).toBe('Initial Note');
  });

  test('shows cancel button with label and link', () => {
    const { getByText } = render(
      <BrowserRouter>
        <NoteForm
          onSave={() => {}}
          cancelLink="/cancel/"
          cancelLabel="My Cancel"
        />
      </BrowserRouter>
    );

    // get cancel anchor generated by Link component and check the href
    const cancelAnchor = getByText('My Cancel');
    expect(cancelAnchor).toBeInTheDocument();
    expect(cancelAnchor.getAttribute('href')).toBe('/cancel/');
  });

  test('shows error when submits with empty text', async () => {
    // a spy function which would be called onSave of NoteForm
    const onSave = jest.fn();

    // render it
    const { getByTestId, findByText } = render(
      <BrowserRouter>
        <NoteForm
          initialNote="some initial value"
          initialTitle="some initial value"
          onSave={onSave}
        />
      </BrowserRouter>
    );

    // now set input values to empty string and hit the submit button
    const form = getByTestId('noteform');

    // since submit would fire a state update, we wrap it inside act
    act(() => {
      fireEvent.submit(form, {
        preventDefault: () => {},
        target: {
          'note-title': {
            value: '',
          },
          'note-note': {
            value: '',
          },
        },
      });
    });

    // onSave should not have been called
    expect(onSave).not.toBeCalled();
    // we should get errors, but on next render, so we need to wait for them
    expect(await findByText('Please enter a title')).toBeInTheDocument();
    expect(await findByText('Please enter a note')).toBeInTheDocument();
  });

  test('calls onSave function when form submits', async () => {
    // a spy function to make sure onSave is called
    const onSave = jest.fn();
    const { getByTestId } = render(
      <BrowserRouter>
        <NoteForm onSave={onSave} />
      </BrowserRouter>
    );

    // now set input values to empty string and hit the submit button
    const form = getByTestId('noteform');

    act(() => {
      fireEvent.submit(form, {
        preventDefault: () => {},
        target: {
          'note-title': {
            value: 'Some value',
          },
          'note-note': {
            value: 'Some other value',
          },
        },
      });
    });

    expect(onSave).toBeCalledTimes(1);
  });
});
